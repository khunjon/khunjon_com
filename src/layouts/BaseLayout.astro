---
export interface Props {
  title?: string;
}

const { title = 'khun jon' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Google tag (gtag.js) -->
  <script is:inline async src="https://www.googletagmanager.com/gtag/js?id=G-XQMBRJC2QZ"></script>
  <script is:inline>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'G-XQMBRJC2QZ');
  </script>

  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <link rel="stylesheet" href={`${import.meta.env.BASE_URL}assets/css/bootstrap.min.css`}>
  <link rel="stylesheet" href={`${import.meta.env.BASE_URL}assets/css/styles.css`}>
</head>
<body>
  <div class="header">
    <h1>khun jon</h1>
  </div>
  <main>
    <slot />
  </main>
  <footer>
    Made in California. Built in Krung Thep.
  </footer>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const header = document.querySelector(".header") as HTMLElement;
      const headerText = document.querySelector(".header h1") as HTMLElement;
    
      if (!header || !headerText) return;

      // Generate random RGB values
      const randomR = Math.floor(Math.random() * 256);
      const randomG = Math.floor(Math.random() * 256);
      const randomB = Math.floor(Math.random() * 256);

      // Convert RGB values to CSS color format
      const randomColor = `rgb(${randomR},${randomG},${randomB})`;
      header.style.backgroundColor = randomColor;
    
      // Calculate luminance (brightness) of the background color
      const luminance = (randomR * 0.299 + randomG * 0.587 + randomB * 0.114) / 255;
    
      // Determine text color based on contrast
      if (luminance > 0.5) {
        headerText.style.color = "#333";
        header.classList.add("contrast-light");
      } else {
        headerText.style.color = "#fff";
        header.classList.add("contrast-dark");
      }
    });
  </script>
</body>
</html>